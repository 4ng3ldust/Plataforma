// src/components/Sidebar.tsx
import React from 'react';
import { useDraggable } from '@dnd-kit/core';
import type { FieldType } from '../types/fields';

interface PaletteItemProps {
  type: FieldType;
  label: string;
  icon: string;
  premium?: boolean;
}

const PaletteItem: React.FC<PaletteItemProps> = ({ type, label, icon, premium }) => {
  // Usamos el tipo directamente como parte del ID para simplificar
  const { attributes, listeners, setNodeRef, transform } = useDraggable({
    id: `palette-${type}`,
  });

  // Aplicar transformaci√≥n para drag-and-drop
  const style = transform ? { transform: `translate3d(${transform.x}px, ${transform.y}px, 0)` } : undefined;

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...listeners}
      {...attributes}
      className={`palette-item ${premium ? 'palette-item-premium' : ''}`}
      aria-label={label}
    >
      <span className="palette-item-icon">{icon}</span>
      <span className="palette-item-label">{label}</span>
    </div>
  );
};

// Definici√≥n de los campos b√°sicos con sus iconos
const basicFields: PaletteItemProps[] = [
  { type: 'pagina', label: 'P√°gina', icon: 'üìÑ' },
  { type: 'seccion', label: 'Secci√≥n', icon: 'üìë' },
  { type: 'mensaje', label: 'Mensaje', icon: 'üí¨' },
  { type: 'numerico', label: 'Num√©rico', icon: 'üî¢' },
  { type: 'fecha_hora', label: 'Fecha/Hora', icon: 'üìÖ' },
  { type: 'opciones', label: 'Opciones', icon: 'üìã' },
  { type: 'ubicacion', label: 'Ubicaci√≥n', icon: 'üìç' },
  { type: 'imagen', label: 'Imagen', icon: 'üñºÔ∏è' },
  { type: 'firma', label: 'Firma', icon: '‚úçÔ∏è' },
];

// Definici√≥n de los campos avanzados con sus iconos
const advancedFields: PaletteItemProps[] = [
  { type: 'num_auto', label: 'Num. Auto', icon: 'üîÑ' },
  { type: 'codigo', label: 'C√≥digo', icon: 'üìä' },
  { type: 'ocr', label: 'OCR', icon: 'üìù', premium: true },
  { type: 'qr', label: 'QR', icon: 'üì±', premium: true },
  { type: 'bosquejo', label: 'Bosquejo', icon: '‚úèÔ∏è' },
  { type: 'oculto', label: 'Oculto', icon: 'üëÅÔ∏è' },
  { type: 'accion', label: 'Acci√≥n', icon: '‚ñ∂Ô∏è' },
  { type: 'tabla', label: 'Tabla', icon: 'üóÉÔ∏è' },
  { type: 'galeria', label: 'Galer√≠a', icon: 'üñºÔ∏è', premium: true },
  { type: 'adjuntar', label: 'Adjuntar', icon: 'üìé' },
  { type: 'datos', label: 'Datos', icon: 'üíæ' },
  { type: 'proceso', label: 'Proceso', icon: '‚öôÔ∏è', premium: true },
  { type: 'rest', label: 'REST', icon: 'üåê', premium: true },
  { type: 'nfc', label: 'NFC', icon: 'üì≤', premium: true },
];

const Sidebar: React.FC = () => {
  return (
    <div className="sidebar-content">
      <div className="sidebar-section">
        <h2 className="sidebar-title">Campos B√°sicos</h2>
        <div className="field-palette">
          {basicFields.map((field) => (
            <PaletteItem key={field.type} {...field} />
          ))}
        </div>
      </div>

      <div className="sidebar-section">
        <h2 className="sidebar-title">Campos Avanzados</h2>
        <div className="field-palette">
          {advancedFields.map((field) => (
            <PaletteItem key={field.type} {...field} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default Sidebar;